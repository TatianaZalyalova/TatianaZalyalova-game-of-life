(function(){"use strict";var __webpack_modules__={762:function(){eval('\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n;// CONCATENATED MODULE: ./src/Game.ts\n\nvar Game = function Game(gameField, gameView) {\n  _classCallCheck(this, Game);\n\n  var state = gameField.getState();\n  var inputRange = document.querySelector(".field-speed");\n  var stepDurationMs;\n\n  if (inputRange) {\n    stepDurationMs = Number(inputRange.value);\n  }\n\n  var isGameRun = false;\n  gameView.updateGameField(state);\n  gameView.updateGameState({\n    height: state.length,\n    isRunning: false,\n    width: state[0].length\n  });\n  gameView.onCellClick(function (y, x) {\n    gameField.toggleCellState(y, x);\n    gameView.updateGameField(gameField.getState());\n  });\n  gameView.onFieldSizeChange(function (width, height) {\n    gameField.setSize(width, height);\n    var newState = gameField.getState();\n    gameView.updateGameField(newState);\n    gameView.updateGameState({\n      height: newState.length,\n      width: newState[0].length\n    });\n  });\n  gameView.onGameStateChange(function (gameRunState) {\n    gameView.updateGameState({\n      isRunning: gameRunState\n    });\n    isGameRun = gameRunState;\n\n    if (gameRunState) {\n      gameField.nextGeneration();\n      gameView.updateGameField(gameField.getState());\n    }\n  });\n\n  function tick() {\n    if (isGameRun) {\n      gameField.nextGeneration();\n      gameView.updateGameField(gameField.getState());\n      inputRange === null || inputRange === void 0 ? void 0 : inputRange.addEventListener("change", function () {\n        clearInterval(interval);\n        stepDurationMs = Number(inputRange.value);\n        interval = setInterval(tick, stepDurationMs);\n      });\n      var numberOfLivingCells = document.querySelectorAll(".cell.cell--alive").length;\n\n      if (numberOfLivingCells === 0) {\n        isGameRun = false;\n        gameView.updateGameState({\n          isRunning: isGameRun\n        });\n      }\n    }\n  }\n\n  var interval = setInterval(tick, stepDurationMs);\n};\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n;// CONCATENATED MODULE: ./src/GameField.ts\n\n\nvar GameField = /*#__PURE__*/function () {\n  function GameField() {\n    var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n    _classCallCheck(this, GameField);\n\n    this.width = width;\n    this.height = height;\n    this.arrState = this.getState();\n  }\n\n  _createClass(GameField, [{\n    key: "getState",\n    value: function getState() {\n      if (this.arrState) {\n        return this.arrState;\n      } else {\n        var arr = [];\n\n        for (var i = 0; i < this.height; i++) {\n          var arrItem = [];\n\n          for (var j = 0; j < this.width; j++) {\n            arrItem.push(0);\n          }\n\n          arr.push(arrItem);\n        }\n\n        return arr;\n      }\n    }\n  }, {\n    key: "toggleCellState",\n    value: function toggleCellState(x, y) {\n      this.arrState[y][x] = this.arrState[y][x] === 0 ? 1 : 0;\n      return this.arrState;\n    }\n  }, {\n    key: "isCellAlive",\n    value: function isCellAlive(x, y) {\n      if (y < 0 || y >= this.arrState.length || x < 0 && x < this.arrState[y].length) {\n        return false;\n      }\n\n      return Boolean(this.arrState[y][x]);\n    }\n  }, {\n    key: "getNumberOfNeighbour",\n    value: function getNumberOfNeighbour(x, y) {\n      var num = 0;\n\n      for (var i = y - 1; i <= y + 1; i++) {\n        for (var k = x - 1; k <= x + 1; k++) {\n          if (i === y && k === x) {\n            continue;\n          }\n\n          num += Number(this.isCellAlive(k, i));\n        }\n      }\n\n      return num;\n    }\n  }, {\n    key: "getNextCellState",\n    value: function getNextCellState(x, y) {\n      var liveCount = this.getNumberOfNeighbour(x, y);\n      var isAlive = this.isCellAlive(x, y);\n\n      if (isAlive && (liveCount === 3 || liveCount === 2)) {\n        return 1;\n      } else if (liveCount === 3) {\n        return 1;\n      }\n\n      return 0;\n    }\n  }, {\n    key: "nextGeneration",\n    value: function nextGeneration() {\n      var _this = this;\n\n      var nextGenerationArr = this.arrState.map(function (row, y) {\n        return row.map(function (cell, x) {\n          return _this.getNextCellState(x, y);\n        });\n      });\n      this.arrState = nextGenerationArr;\n    }\n  }, {\n    key: "setSize",\n    value: function setSize(newWidth, newHeight) {\n      for (var i = 0; i < this.arrState.length; i++) {\n        for (var k = this.arrState[i].length; k < newWidth; k++) {\n          this.arrState[i][k] = 0;\n        }\n\n        if (newWidth < this.arrState[i].length) {\n          this.arrState[i].splice(newWidth, this.arrState[i].length - newWidth);\n        }\n      }\n\n      if (newHeight < this.arrState.length) {\n        this.arrState.splice(newHeight, this.arrState.length - newHeight);\n      }\n\n      for (var _i = this.arrState.length; _i < newHeight; _i++) {\n        var arr = [];\n\n        for (var j = 0; j < newWidth; j++) {\n          arr.push(0);\n        }\n\n        this.arrState.push(arr);\n      }\n    }\n  }]);\n\n  return GameField;\n}();\n;// CONCATENATED MODULE: ./src/GameView.ts\n\n\nvar GameView = /*#__PURE__*/function () {\n  function GameView(el) {\n    _classCallCheck(this, GameView);\n\n    var gameField = document.createElement("div");\n    gameField.classList.add("gameField");\n    el.appendChild(gameField);\n    var gameControls = document.createElement("div");\n    gameControls.classList.add("gameControls");\n    el.appendChild(gameControls);\n    var buttonStopped = document.createElement("button");\n    buttonStopped.classList.add("run-button");\n    buttonStopped.classList.add("run-button--stopped");\n    buttonStopped.innerHTML = "Play";\n    gameControls.appendChild(buttonStopped);\n    var inputSizeWidth = document.createElement("input");\n    inputSizeWidth.classList.add("field-size");\n    inputSizeWidth.classList.add("field-size--width");\n    inputSizeWidth.setAttribute("type", "number");\n    gameControls.appendChild(inputSizeWidth);\n    var inputSizeHeight = document.createElement("input");\n    inputSizeHeight.classList.add("field-size");\n    inputSizeHeight.classList.add("field-size--height");\n    inputSizeHeight.setAttribute("type", "number");\n    gameControls.appendChild(inputSizeHeight);\n    var inputSpeed = document.createElement("input");\n    inputSpeed.classList.add("field-speed");\n    inputSpeed.setAttribute("type", "range");\n    inputSpeed.setAttribute("min", "1");\n    inputSpeed.setAttribute("max", "5000");\n    inputSpeed.setAttribute("step", "10");\n    inputSpeed.value = "500";\n    gameControls.appendChild(inputSpeed);\n    this.el = el;\n  }\n\n  _createClass(GameView, [{\n    key: "updateGameField",\n    value: function updateGameField(field) {\n      var gameFieldEl = this.el.querySelector(".gameField");\n      gameFieldEl.innerHTML = "<table>\\n      <tbody>".concat(field.map(function (row, y) {\n        return "<tr>".concat(row.map(function (cell, x) {\n          return "<td class=\\"cell cell--".concat(cell ? "alive" : "dead", "\\"></td>");\n        }).join(""), "\\n        </tr>");\n      }).join(""), "\\n      </tbody>\\n    </table>");\n    }\n  }, {\n    key: "updateGameState",\n    value: function updateGameState(state) {\n      var buttonRun = this.el.querySelector(".run-button");\n      var inputSizeHeight = this.el.querySelector("input.field-size--height");\n      var inputSizeWidth = this.el.querySelector("input.field-size--width");\n\n      if (state.isRunning) {\n        buttonRun === null || buttonRun === void 0 ? void 0 : buttonRun.classList.remove("run-button--stopped");\n        buttonRun === null || buttonRun === void 0 ? void 0 : buttonRun.classList.add("run-button--runned");\n        buttonRun.innerHTML = "Stop";\n      } else {\n        buttonRun === null || buttonRun === void 0 ? void 0 : buttonRun.classList.remove("run-button--runned");\n        buttonRun === null || buttonRun === void 0 ? void 0 : buttonRun.classList.add("run-button--stopped");\n        buttonRun.innerHTML = "Play";\n      }\n\n      if (!(state.width === undefined || state.height === undefined)) {\n        inputSizeWidth.value = state.width.toString();\n        inputSizeHeight.value = state.height.toString();\n      }\n    }\n  }, {\n    key: "onCellClick",\n    value: function onCellClick(cb) {\n      var gameFieldEl = this.el.querySelector(".gameField");\n\n      function callCbWithArgs(el) {\n        if (el.target.tagName === "TD") {\n          var _y = el.target.cellIndex;\n          var _x = el.target.closest("tr").rowIndex;\n          cb(_y, _x);\n        }\n      }\n\n      gameFieldEl.addEventListener("click", callCbWithArgs, true);\n    }\n  }, {\n    key: "onGameStateChange",\n    value: function onGameStateChange(cb) {\n      var buttonRun = this.el.querySelector(".run-button");\n\n      function callCbStateChange(el) {\n        var newState = buttonRun.classList.contains("run-button--stopped");\n        cb(newState);\n      }\n\n      buttonRun.addEventListener("click", callCbStateChange, true);\n    }\n  }, {\n    key: "onFieldSizeChange",\n    value: function onFieldSizeChange(cb) {\n      var inputWidth = this.el.querySelector(".field-size.field-size--width");\n      var inputHeight = this.el.querySelector(".field-size.field-size--height");\n      var el = this.el;\n\n      function cbSizeChange() {\n        var width = Number(inputWidth.value);\n        var height = Number(inputHeight.value);\n\n        if (width > 0 && height > 0) {\n          cb(width, height);\n        }\n      }\n\n      inputWidth.addEventListener("change", cbSizeChange, true);\n      inputHeight.addEventListener("change", cbSizeChange, true);\n    }\n  }]);\n\n  return GameView;\n}();\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n\nvar el = document.getElementById("app");\nvar gameView = new GameView(el);\nvar gameField = new GameField(5, 5);\nnew Game(gameField, gameView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///762\n')}},__webpack_exports__={};__webpack_modules__[762]()})();